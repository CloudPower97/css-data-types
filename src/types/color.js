import percentage from './percentage'

const percentageReplace = percentage.replace(/\^/g, '').replace(/\$/g, '')

// TODO: Add HSL/HSLA notation
const colors = [
  'black',
  'silver',
  'gray',
  'white',
  'maroon',
  'red',
  'purple',
  'fuchsia',
  'green',
  'lime',
  'olive',
  'yellow',
  'navy',
  'blue',
  'teal',
  'aqua',
  'orange',
  'aliceblue',
  'antiquewhite',
  'aquamarine',
  'azure',
  'beige',
  'bisque',
  'blanchedalmond',
  'blueviolet',
  'brown',
  'burlywood',
  'cadetblue',
  'chartreuse',
  'chocolate',
  'coral',
  'cornflowerblue',
  'cornsilk',
  'crimson',
  'cyan',
  'aqua',
  'darkblue',
  'darkcyan',
  'darkgoldenrod',
  'darkgray',
  'darkgreen',
  'darkgrey',
  'darkkhaki',
  'darkmagenta',
  'darkolivegreen',
  'darkorange',
  'darkorchid',
  'darkred',
  'darksalmon',
  'darkseagreen',
  'darkslateblue',
  'darkslategray',
  'darkslategrey',
  'darkturquoise',
  'darkviolet',
  'deeppink',
  'deepskyblue',
  'dimgray',
  'dimgrey',
  'dodgerblue',
  'firebrick',
  'floralwhite',
  'forestgreen',
  'gainsboro',
  'ghostwhite',
  'gold',
  'goldenrod',
  'greenyellow',
  'grey',
  'honeydew',
  'hotpink',
  'indianred',
  'indigo',
  'ivory',
  'khaki',
  'lavender',
  'lavenderblush',
  'lawngreen',
  'lemonchiffon',
  'lightblue',
  'lightcoral',
  'lightcyan',
  'lightgoldenrodyellow',
  'lightgray',
  'lightgreen',
  'lightgrey',
  'lightpink',
  'lightsalmon',
  'lightseagreen',
  'lightskyblue',
  'lightslategray',
  'lightslategrey',
  'lightsteelblue',
  'lightyellow',
  'limegreen',
  'linen',
  'magenta',
  'fuchsia',
  'mediumaquamarine',
  'mediumblue',
  'mediumorchid',
  'mediumpurple',
  'mediumseagreen',
  'mediumslateblue',
  'mediumspringgreen',
  'mediumturquoise',
  'mediumvioletred',
  'midnightblue',
  'mintcream',
  'mistyrose',
  'moccasin',
  'navajowhite',
  'oldlace',
  'olivedrab',
  'orangered',
  'orchid',
  'palegoldenrod',
  'palegreen',
  'paleturquoise',
  'palevioletred',
  'papayawhip',
  'peachpuff',
  'peru',
  'pink',
  'plum',
  'powderblue',
  'rosybrown',
  'royalblue',
  'saddlebrown',
  'salmon',
  'sandybrown',
  'seagreen',
  'seashell',
  'sienna',
  'skyblue',
  'slateblue',
  'slategray',
  'slategrey',
  'snow',
  'springgreen',
  'steelblue',
  'tan',
  'thistle',
  'tomato',
  'turquoise',
  'violet',
  'wheat',
  'whitesmoke',
  'yellowgreen',
  'rebeccapurple',
]

const colorKeywords = `^(?:${colors.join(',').replace(/,/g, '|')}|transparent|currentColor)$`

const hexNotation = '^#(?:[A-Fa-f0-9]{6}([A-Fa-f0-9]{2})?$|[A-Fa-f0-9]{3}[A-Fa-f0-9]?)'

/**
 * R (red), G (green), and B (blue) can be either <integer>s or <percentage>s,
 * where the number 255 corresponds to 100%.
 */
const rgbRange = '0*([0-9]|[1-8][0-9]|9[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]){1,3}'

/**
 * A (alpha) can be a <number> between 0 and 1,
 * or a <percentage>, where the number 1 corresponds to 100% (full opacity).
 */
const alphaRange = `(?:(?:\\.\\d+|(?:[0].\\d+)|[0]|[1](?:.[0]+)?)|${percentageReplace})`

/**
 * We test both the rgb(R, G, B[, A]) and the CSS Colors Level 4 support for space-separated values rgb(R G B[ / A]) syntax
 * We test that one doesn't mix integers and percentages as well.
 */
const rgb = `(?:rgb\\(${rgbRange}(,|\\s)\\s*${rgbRange}(,|\\s)\\s*${rgbRange}(,\\s*${alphaRange})?\\)|rgb\\(${percentageReplace}(,|\\s)\\s*${percentageReplace}(,|\\s)\\s*${percentageReplace}(,\\s*${alphaRange})?\\)|rgb\\(${rgbRange}\\s*${rgbRange}\\s*${rgbRange}(\\s*\\/\\s*${alphaRange})?\\))`

/**
 * We test both the rgba(R, G, B, A) and the CSS Colors Level 4 support for space-separated values rgba(R G B / A) syntax
 * We test that one doesn't mix integers and percentages as well.
 */
const rgba = `(?:rgba\\(${rgbRange}(,|\\s)\\s*${rgbRange}(,|\\s)\\s*${rgbRange},\\s*${alphaRange}\\)|rgba\\(${percentageReplace}(,|\\s)\\s*${percentageReplace}(,|\\s)\\s*${percentageReplace},\\s*${alphaRange}\\)|rgba\\(${rgbRange}\\s*${rgbRange}\\s*${rgbRange}\\s*\\/\\s*${alphaRange}\\))`

export default `${colorKeywords}|${hexNotation}|${rgb}|${rgba}`
